name: CI/CD Pipeline

on:
  push:
    branches:
      - video

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r 2.1-databases/models_list_displaying/requirements.txt

      - name: Run migrations and tests
        env:
          DATABASE_URL: postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ secrets.DB_NAME }}
        run: |
          cd 2.1-databases/models_list_displaying
          python manage.py migrate
          python manage.py test

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          REMOTE_PROJECT_PATH: ${{ secrets.REMOTE_PROJECT_PATH }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
            cd $REMOTE_PROJECT_PATH
            git pull origin video
            source venv/bin/activate
            pip install --upgrade -r 2.1-databases/models_list_displaying/requirements.txt
            cd 2.1-databases/models_list_displaying
            python manage.py migrate
            python manage.py collectstatic --noinput
            sudo systemctl restart gunicorn
          EOF
